{
    "project": {
        "name": "viewy-view",
        "description": "JavaScript library for client-side web application user interface development.",
        "version": "0.5.0",
        "url": "https://github.com/viewy/viewy-view"
    },
    "files": {
        "src/view.js": {
            "name": "src/view.js",
            "modules": {
                "viewy-view": 1
            },
            "classes": {
                "View": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "viewy-view": {
            "name": "viewy-view",
            "submodules": {},
            "classes": {
                "View": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/view.js",
            "line": 57,
            "description": "# viewy-view\n  - JavaScript library that facilitates development of large scale client-side web applications with rich user interfaces\n  - introduces a structural/architectural abstraction layer on top of common client-side web technology (HTML/CSS/JS)\n  - inspired by and built around concepts found in native UI development\n\n## Concept\n\nExamination of a view from different perspectives & definition of terminology:\n\n### View Component (architectural point of view)\n  - a reusable component being instantiated at runtime\n  - consists of a view controller and a bundle\n  - behavior and styling may be extended/overridden/customized by inheritance/cascading\n\n### View Controller (runtime/behavior point of view)\n  - Constructor and prototype object providing common behavior across all instances of a view component\n\n### View Bundle (resource/graphical representation point of view)\n  - collection of resources providing means for a common graphical representation across all instances of a view component\n  - e.g. HTML markup, CSS stylesheet, media resources (e.g. images/audio/video)\n\n### View (general/runtime/instance point of view)\n  - concrete instance of a view component\n  - self-contained/self-managed piece of UI, most like a widget\n  - scoping: managed DOM subtree that has scoped styling and behavior\n  - composition: view instances can be in a parent/child relationship meaning that a view may have one or more other views nested inside of itself. This results in a tree structure, the \"View Hierarchy\"\n  - lifecycle: a view has a lifecycle (construction/instantiation, loading, [showing, hiding, doing stuff], unloading, deallocation)\n  - memory management",
            "author": "Andreas Tietz",
            "requires": [
                "requirejs",
                "jquery"
            ]
        }
    },
    "classes": {
        "View": {
            "name": "View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "viewy-view",
            "namespace": "",
            "file": "src/view.js",
            "line": 57,
            "description": "Base implementation of a view controller providing scoped and configurable behavior across all instances of a view component.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src/view.js",
            "line": 1,
            "description": "viewy-view 0.5.0\nCopyright (c) 2014 Viewy Organization and Contributors\nReleased under the MIT license",
            "class": "View"
        },
        {
            "file": "src/view.js",
            "line": 78,
            "description": "General configuration:",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 90,
            "description": "Helper function that facilitates prototypal inheritance from Views.\n\nNote: Assign a name to the passed in constructor function in order for it to be correctly printed out in console logs.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "extension",
                    "description": "Prototype attributes and methods being added to the view prototype to be inherited from.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Constructor of the extended/inherited view.",
                "type": "Function"
            },
            "example": [
                "\n    var MyView = View.prototype.extend({\n        constructor: function MyView (config) {..},\n        viewDidLoad: function () {..},\n        myNewFunction: function () {..}\n        myNewAttribute: ..\n        ...\n    };"
            ],
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 140,
            "description": "Function being called on the view itself when the \"view did load\" event occurs.\n\nInherited views may override and implement this function.",
            "itemtype": "method",
            "name": "viewDidLoad",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 151,
            "description": "Function being called on the view itself when the \"view will unload\" event occurs.\n\nInherited views may override and implement this function.",
            "itemtype": "method",
            "name": "viewWillUnload",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 166,
            "description": "Helper function for defining accessors.",
            "itemtype": "method",
            "name": "defineAccessors",
            "params": [
                {
                    "name": "accessors",
                    "description": "Object defining {set: and get:} accessors.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 192,
            "description": "Unique name for the view to be distinguished from other views at the same hierarchy level.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "undefined",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 207,
            "description": "HTML & CSS module/filenames.",
            "itemtype": "property",
            "name": "bundle",
            "type": "String",
            "default": "undefined",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 222,
            "description": "Parent view up the view hierarchy that \"owns\" the view.",
            "itemtype": "property",
            "name": "parentView",
            "type": "View",
            "default": "undefined",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 241,
            "description": "Direct child views down the view hierarchy \"owned\" by the view.\n\nSetter does not actually load child views.",
            "itemtype": "property",
            "name": "childViews",
            "type": "Array of Views",
            "default": "[]",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 269,
            "description": "Determines whether the view is the first view in a view hierarchy and therefore has no parent view.\nThis is a purely calculated property.",
            "itemtype": "property",
            "name": "isRootView",
            "type": "Boolean",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 280,
            "description": "Determines whether the view's DOM is currently loaded.\nThis is a purely calculated property.",
            "itemtype": "property",
            "name": "isLoaded",
            "readonly": "",
            "type": "Boolean",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 296,
            "description": "Subscription for \"view did load\" events.",
            "itemtype": "property",
            "name": "onViewDidLoad",
            "type": "Mixed",
            "default": "{\n             subscribe: Function\n             unsubscribe: Function\n         }",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 320,
            "description": "Subscription for \"view will unload\" events.",
            "itemtype": "property",
            "name": "onViewWillUnload",
            "type": "Mixed",
            "default": "{\n             subscribe: Function\n             unsubscribe: Function\n         }",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 348,
            "description": "Backup copy of the original container element to be restored when unloading.",
            "itemtype": "property",
            "name": "_containerElement",
            "access": "private",
            "tagname": "",
            "type": "jQuery Element",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 357,
            "description": "Loaded view root DOM node (replacement of the original container element).",
            "itemtype": "property",
            "name": "_viewElement",
            "access": "private",
            "tagname": "",
            "type": "jQuery Element",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 370,
            "description": "Adds a view to the view hierarchy as a direct child. Does not actually load the child view.",
            "itemtype": "method",
            "name": "addChildView",
            "params": [
                {
                    "name": "newChildView",
                    "description": "Child view to be added.",
                    "type": "View"
                }
            ],
            "return": {
                "description": "Added child view.",
                "type": "View"
            },
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 398,
            "description": "Removes a direct child view from the view hierarchy. Unloads the child view if necessary.",
            "itemtype": "method",
            "name": "removeChildView",
            "params": [
                {
                    "name": "childView",
                    "description": "Child view to be removed.",
                    "type": "View"
                }
            ],
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 427,
            "description": "Removes all direct child view from the view hierarchy. Unloads child views if necessary.",
            "itemtype": "method",
            "name": "removeAllChildViews",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 447,
            "description": "Removes the view from the parent view hierarchy (behaves the same as removeChildView). Unloads the view if necessary.",
            "itemtype": "method",
            "name": "removeFromParentView",
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 464,
            "description": "Performs a jQuery selector scoped to the root element of a loaded view.",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector being scoped to the root element.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Root element of a loaded view if invoked without a parameter,\n                         scoped jQuery selection result if invoked with a selector\n                         or undefined if the view is not loaded.",
                "type": "JQuery Element"
            },
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 487,
            "description": "Loads markup and styles from HTML and CSS files specified by the bundle property into the container element identified by the name property.",
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "Promise for the \"view did load\" state.",
                "type": "JQuery Deferred Promise"
            },
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 587,
            "description": "Unloads the DOM by restoring the originally occupied container element.",
            "itemtype": "method",
            "name": "unload",
            "return": {
                "description": "Promise for the \"view will unload\" state.",
                "type": "JQuery Deferred Promise"
            },
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 630,
            "description": "Provides a human readable string representation of a view.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String representation of the view.",
                "type": "String"
            },
            "example": [
                "\n    Format: \"[<controller/constructor name>&<bundle name>@<path in hierarchy represented by container element names>:<loaded or !loaded>]\"\n    Output: \"[View&TestView@root/a/b/c/d:!loaded]\""
            ],
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 648,
            "description": "Recursively traverses down the child view hierarchy of a view while invoking\na function for each view passing it the view and the recursion level.",
            "itemtype": "method",
            "name": "traverse",
            "params": [
                {
                    "name": "fn",
                    "description": "Function being invoked for each view and being passed the view object and the recursion level.",
                    "type": "Function"
                },
                {
                    "name": "level",
                    "description": "Indicates the current level of recursion.",
                    "type": "Number"
                }
            ],
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 665,
            "description": "Provides a human readable string representation of the current state of the child view hierarchy.",
            "itemtype": "method",
            "name": "getViewHierarchyHumanReadable",
            "return": {
                "description": "String representation of the child view hierarchy.",
                "type": "String"
            },
            "example": [
                "\n    Output:\n    \"[View&TestView1@root:loaded]\n     |--> [View&TestView2@root/a:!loaded]\n     |--> [View&TestView3@root/b:!loaded]\""
            ],
            "class": "View",
            "module": "viewy-view"
        },
        {
            "file": "src/view.js",
            "line": 687,
            "description": "Provides a human readable string representation of the view path inside the\nhierarchy represented by container element names starting with the root view.",
            "itemtype": "method",
            "name": "getPathInHierarchy",
            "return": {
                "description": "String representation of the view path inside the hierarchy.",
                "type": "String"
            },
            "example": [
                "\n    View hierarchy (container element names):\n    root\n    |-> a\n    |   |-> c\n    |       |-> d\n    |-> b\n\n    console.log(d.getViewHierarchyHumanReadable());\n    Output: \"root/a/c/d\""
            ],
            "class": "View",
            "module": "viewy-view"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nviewy-view 0.5.0\nCopyright (c) 2014 Viewy Organization and Contributors\nReleased under the MIT license",
            "line": " src/view.js:1"
        },
        {
            "message": "Missing item type\nGeneral configuration:",
            "line": " src/view.js:78"
        }
    ]
}